{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":3402697,"sourceType":"datasetVersion","datasetId":2051125}],"dockerImageVersionId":30177,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization, GlobalAveragePooling2D\nfrom tensorflow.keras.optimizers import Adamax\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\n# Ensure Pillow is installed\ntry:\n    from PIL import Image\nexcept ImportError:\n    print(\"Pillow is not installed. Install it by running: pip install pillow\")\n\n# Set paths and read CSV\nsdir=r'../input/chicken-disease-1/Train'\ncsvpath=r'../input/chicken-disease-1/train_data.csv'\ndf = pd.read_csv(csvpath)\ndf.columns = ['filepaths', 'labels']\ndf['filepaths'] = df['filepaths'].apply(lambda x: os.path.join(sdir, x))\n\n\n# Train, validation, test split\ntrain_df, temp_df = train_test_split(df, train_size=0.9, shuffle=True, random_state=123, stratify=df['labels'])\nvalid_df, test_df = train_test_split(temp_df, train_size=0.5, shuffle=True, random_state=123, stratify=temp_df['labels'])\n\n# Data generators\nimg_size = (224, 224)\nbatch_size = 20\ntrgen = ImageDataGenerator(horizontal_flip=True, rotation_range=20, width_shift_range=0.2, height_shift_range=0.2, zoom_range=0.2)\nt_and_v_gen = ImageDataGenerator()\n\ntrain_gen = trgen.flow_from_dataframe(train_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical', batch_size=batch_size)\nvalid_gen = t_and_v_gen.flow_from_dataframe(valid_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical', batch_size=batch_size)\ntest_gen = t_and_v_gen.flow_from_dataframe(test_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical', batch_size=batch_size)\n\n# Model definition using Sequential\nmodel = tf.keras.Sequential([\n    tf.keras.applications.EfficientNetB5(include_top=False, weights=\"imagenet\", input_shape=(img_size[0], img_size[1], 3)),\n    GlobalAveragePooling2D(),\n    BatchNormalization(),\n    Dense(1024, kernel_regularizer=tf.keras.regularizers.l2(0.016), activity_regularizer=tf.keras.regularizers.l1(0.006), bias_regularizer=tf.keras.regularizers.l1(0.006), activation='relu'),\n    Dropout(0.3),\n    Dense(128, kernel_regularizer=tf.keras.regularizers.l2(0.016), activity_regularizer=tf.keras.regularizers.l1(0.006), bias_regularizer=tf.keras.regularizers.l1(0.006), activation='relu'),\n    Dropout(0.45),\n    Dense(len(train_df['labels'].unique()), activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer=Adamax(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Model training\nepochs = 20\nhistory = model.fit(train_gen, epochs=epochs, validation_data=valid_gen, verbose=1)\n\n# Save model\nmodel.save('poultry_disease_cnn.h5')\n\n# Convert to TFLite\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()\nwith open('poultry_disease_cnn.tflite', 'wb') as f:\n    f.write(tflite_model)\n\nprint(\"Model training and conversion complete.\")","metadata":{"execution":{"iopub.status.busy":"2022-04-06T22:21:58.573544Z","iopub.execute_input":"2022-04-06T22:21:58.574159Z","iopub.status.idle":"2022-04-06T22:21:58.58565Z","shell.execute_reply.started":"2022-04-06T22:21:58.574115Z","shell.execute_reply":"2022-04-06T22:21:58.584737Z"},"trusted":true},"execution_count":null,"outputs":[]}]}